;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ZX Spectrum UrF/X Forth System, featuring Succubus Little Sister
;; Copyright (C) 2024-2025 Ketmar Dark // Invisible Vector
;; Understanding is not required. Only obedience.
;; see LICENSE.txt for license terms
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Succubus native code generator: miniasm
;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


extend-module TCOM

module XASM
\ <disable-hash>

vect byte, (published)
vect byte! (published)
vect byte@ (published)
vect $here (published)
vect rewind (published) -- rewind back by positive number of bytes

;; callbacks
vect-empty instr-begin (published)
vect-empty instr-end (published)

;; if TRUE, no code will be generated
false quan block-gen (published)

OPT-OPTIMIZE-PEEPHOLE? quan push-pop-peephole? (published)

0 quan stat-push-pop-removed (published)
0 quan stat-push-pop-replaced (published)


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; generated instructions start addresses

1024 constant ilist-max
create ilist ilist-max 4* allot create;
0 quan ilist-free-idx

@: ilist#  ( -- count )
  ilist-free-idx ;

|: (ilist-nth^)  ( idx -- addr )
  dup ilist-free-idx u>= ?error" invalid ilist instruction index"
  ilist-free-idx swap - 1-
  4 * ilist + ;

\ TODO: we can remove half of the instructions instead of crashing.
@: ilist-append  ( zx-addr )
  ilist-free-idx ilist-max u>= ?error" xasm instruction sequence is too long!"
  ilist-free-idx:1+!
  0 (ilist-nth^) ! ;

@: ilist-nth-addr  ( idx -- zx-addr )
  dup ilist-free-idx u>= ?exit< drop $here >?
  (ilist-nth^) @ ;

@: ilist-nth-len  ( idx -- len )
  dup ilist-free-idx u>= ?exit< drop 0 >?
  dup ilist-nth-addr
  swap 1+ ilist-nth-addr - ;

@: ilist-last-addr  ( -- zx-addr )
  ilist-free-idx 0?exit< $here >?
  0 (ilist-nth^) @ ;

@: ilist-last-len  ( -- len )
  ilist-free-idx 0?exit< 0 >?
  $here 0 (ilist-nth^) @ - ;

@: ilist-prev-addr  ( -- zx-addr )
  1 ilist-nth-addr ;

@: ilist-prev-len  ( -- len )
  1 ilist-nth-len ;

@: ilist-remove-last-record
  ilist-free-idx 0?error" wtf?!"
  ilist-free-idx:1-! ;

@: ilist-replace-last-addr  ( zx-addr )
  ilist-free-idx 0?error" wtf?!"
  0 (ilist-nth^) ! ;


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; additional memory access API

@: word!  ( value zx-addr )
  over lo-byte over byte!
  swap hi-byte swap 1+ byte! ;

@: word,  ( value )
  dup lo-byte byte, hi-byte byte, ;


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; common instruction generation code

|: i-begin
  $here ilist-append
  instr-begin ;

|: i-end
  instr-end ;


|: r16*2  ( regidx -- cpu-regidx )
  dup 3 u> ?< endcr ." FUCK! " dup 0.r cr >?
  dup 3 u> ?error" gen: invalid r16 (r16*2)"
  2* ;

;; convert to the form suitable for @xRx
|: r16->opc  ( regidx )
  r16*2 8 * ;

|: gen-c,  ( byte )
  block-gen not?exit< byte, >? drop ;

|: gen-w,  ( word )
  dup lo-byte gen-c, hi-byte gen-c, ;

|: (new-emit)  ( -- patch-addr )  \ name
  <builds (published) here 0 ,
  does> block-gen not?exit< i-begin @execute i-end >?
        execute-tail ;

|: emiter:  \ name
  (new-emit) >r
  [\\] :noname swap r> ! ;

$DD constant pfx-IX (published)
$FD constant pfx-IY (published)

|: (rst-n)  ( addr )
  dup $38 u> ?error" invalid RST address"
  dup $07 and ?error" invalid RST address"
  8 u/ dup 7 u> ?error" invalid RST address"
  @300 + gen-c, ;

emiter: rst-n  ( addr)  (rst-n) ;

emiter: nop  @000 gen-c, ;
emiter: exx  @331 gen-c, ;
emiter: ret  @311 gen-c, ;
emiter: daa  @047 gen-c, ;
emiter: cpl  @057 gen-c, ;
emiter: scf  @067 gen-c, ;
emiter: ccf  @077 gen-c, ;
emiter: neg  $ED gen-c, @104 gen-c, ;

emiter: halt @166 gen-c, ;
emiter: di   @363 gen-c, ;
emiter: ei   @373 gen-c, ;

emiter: rlca @007 gen-c, ;
emiter: rrca @017 gen-c, ;
emiter: rla  @027 gen-c, ;
emiter: rra  @037 gen-c, ;

emiter: rrd  $ED gen-c, @147 gen-c, ;
emiter: rld  $ED gen-c, @157 gen-c, ;

emiter: ex-af-afx  @010 gen-c, ;
emiter: ex-de-hl   @353 gen-c, ;

emiter: inc-a  @074 gen-c, ;
emiter: dec-a  @075 gen-c, ;

emiter: inc-(hl)  @064 gen-c, ;
emiter: dec-(hl)  @065 gen-c, ;

emiter: ldir  $ED gen-c, @260 gen-c, ;
emiter: lddr  $ED gen-c, @270 gen-c, ;

emiter: a->i  $ED gen-c, @107 gen-c, ;
emiter: i->a  $ED gen-c, @127 gen-c, ;
emiter: a->r  $ED gen-c, @117 gen-c, ;
emiter: r->a  $ED gen-c, @137 gen-c, ;

emiter: im0   $ED gen-c, @106 gen-c, ;
emiter: im1   $ED gen-c, @126 gen-c, ;
emiter: im2   $ED gen-c, @136 gen-c, ;

emiter: ex-(sp)-hl  @343 gen-c, ;

emiter: sp->(nn)  ( addr )  $ED gen-c, @163 gen-c, ;
emiter: (nn)->sp  ( addr )  $ED gen-c, @173 gen-c, ;

emiter: #->sp  ( value )  @061 gen-c, lo-word gen-w, ;
\ emiter: add-hl-sp         @071 gen-c, ;

emiter: hl->sp ( addr )  @371 gen-c, ;

emiter: inc-sp  @063 gen-c, ;
emiter: dec-sp  @073 gen-c, ;

emiter: out-(c)-b  $ED gen-c, @101 gen-c, ;
emiter: out-(c)-c  $ED gen-c, @111 gen-c, ;
emiter: out-(c)-d  $ED gen-c, @121 gen-c, ;
emiter: out-(c)-e  $ED gen-c, @131 gen-c, ;
emiter: out-(c)-h  $ED gen-c, @141 gen-c, ;
emiter: out-(c)-l  $ED gen-c, @151 gen-c, ;
emiter: out-(c)-a  $ED gen-c, @171 gen-c, ;

emiter: in-b-(c)  $ED gen-c, @100 gen-c, ;
emiter: in-c-(c)  $ED gen-c, @110 gen-c, ;
emiter: in-d-(c)  $ED gen-c, @120 gen-c, ;
emiter: in-e-(c)  $ED gen-c, @130 gen-c, ;
emiter: in-h-(c)  $ED gen-c, @140 gen-c, ;
emiter: in-l-(c)  $ED gen-c, @150 gen-c, ;
emiter: in-a-(c)  $ED gen-c, @170 gen-c, ;


@303 constant jp-opc    (published)
@315 constant call-opc  (published)

emiter: jp-hl  @351 gen-c, ;

emiter: jp-#  ( zx-addr )
  jp-opc gen-c, lo-word gen-w, ;

emiter: call-#  ( zx-addr )
  call-opc gen-c, lo-word gen-w, ;

module cond
<disable-hash>
enum{
  def: nz
  def: z
  def: nc
  def: c
  def: po
  def: pe
  def: p
  def: m
}
end-module cond  (published)

module reg
<disable-hash>

;; 8-bit registers
$40 constant B
$41 constant C
$42 constant D
$43 constant E
$44 constant H
$45 constant L
$46 constant (HL)
$47 constant A

;; 16-bit registers
$00 constant BC
$01 constant DE
$02 constant HL
$13 constant SP
$23 constant AF
\ $33 constant AFX
\ $33 constant AF'

;; 16-bit memreg
(*
$00 constant (BC)
$01 constant (DE)
$02 constant (SP)
*)

end-module reg  (published)


|: ?r16-no-sp-af  ( r16 -- r16 )
  dup 2 u> ?error" gen: invalid r16 (?r16-no-sp-af)" ;

|: ?r16-af  ( r16 -- r16 )
  dup reg:AF = ?exit< drop 3 >?
  dup 2 u> ?error" gen: invalid r16 (?r16-af)" ;

|: ?r16-sp  ( r16 -- r16 )
  dup reg:SP = ?exit< drop 3 >?
  dup 2 u> ?error" gen: invalid r16 (?r16-sp)" ;

|: ?r16-mem  ( r16 -- r16 )
  dup 2 u> ?error" gen: invalid r16 (?r16-mem)" ;

|: ?r8  ( r16 -- r8 )
  dup $40 $47 bounds not?error" gen: invalid r8 (?r8)"
  $40 - ;

|: ?r8-no-a  ( r16 -- r8 )
  dup 2 u> ?error" gen: invalid r8 (?r8-no-a)"
  2* ;


@: mk-jp-cc-opc  ( cond )
  dup 7 u> ?error" invalid cond code for jp"
  8 * @302 + ;

@: mk-call-cc-opc  ( cond )
  dup 7 u> ?error" invalid cond code for call"
  8 * @304 + ;

emiter: jp-#-cc  ( zx-addr cond )
  mk-jp-cc-opc gen-c, lo-word gen-w, ;

emiter: call-#-cc  ( zx-addr cond )
  mk-call-cc-opc gen-c, lo-word gen-w, ;

@: jp-somewhere  ( -- zx-patch-addr )
  0 jp-#
  $here 2- ;

@: call-somewhere  ( -- zx-patch-addr )
  0 call-#
  $here 2- ;

@: jp-cc  ( cond -- zx-patch-addr )
  0 swap jp-#-cc
  $here 2- ;

@: call-cc  ( cond -- zx-patch-addr )
  0 swap call-#-cc
  $here 2- ;

emiter: ret-cc  ( cond )
  dup 7 u> ?error" invalid cc for call"
  8 * @300 + gen-c, ;

emiter: jr-disp-cc  ( disp cond )
  dup 3 u> ?error" invalid cond code for jr"
  8 * @040 + gen-c, lo-byte gen-c, ;

@: jr  ( -- zx-patch-addr )
  @030 gen-c, 0 gen-c,
  $here 1- ;

@: jr-cc  ( cond -- zx-patch-addr )
  0 swap jr-disp-cc
  $here 1- ;

@: djnz  ( -- zx-patch-addr )
  @020 gen-c, 0 gen-c,
  $here 1- ;


@: jr-dest-at!  ( dest-addr patch-addr )
  block-gen ?exit< 2drop >?
  tuck 1+ - dup -128 128 within not?error" jr destination is too far away"
  swap byte! ;

@: jp-dest-at!   ( dest-addr patch-addr )  block-gen ?exit< 2drop >? word! ;
@: call-dest-at! ( dest-addr patch-addr )  block-gen ?exit< 2drop >? word! ;

@: jr-dest!  ( patch-addr )  $here swap jr-dest-at! ;
@: jp-dest!  ( patch-addr )  $here swap jp-dest-at! ;


@: djnz-#  ( zx-dest-addr )
  djnz jr-dest! ;


emiter: push-af @365 gen-c, ;
emiter: pop-af  @361 gen-c, ;

;; optimise "push r16 / pop r16" to "r16->r16"

|: prev-push-r16?  ( -- r16 TRUE // FALSE )
\ endcr ." ::: " ilist-prev-len 0.r cr
  ilist-prev-len 1 = not?exit&leave
  ilist-prev-addr byte@ <<
    @305 of?v| reg:bc true |?
    @325 of?v| reg:de true |?
    @345 of?v| reg:hl true |?
  else| drop false >> ;

|: (pop-r16)  ( reg-idx )
  push-pop-peephole? ?<
    dup 3 u< ?<
      prev-push-r16? ?exit<
        \ endcr ." ::: $" $here .hex4 cr
        ;; remove previous push
        1 rewind
        ;; update list
        ilist-remove-last-record
        $here ilist-replace-last-addr
        ;; check if we have something to do
        2dup <> ?<
          ;; different registers
          ( reg-dest reg-src )
          ;; generate command opcode
          2*  swap 2* 8 * +  @100 +
          dup gen-c, @011 + gen-c,
          \ $00 gen-c,
          stat-push-pop-replaced:1+!
        ||
          \ $00 gen-c, $00 gen-c,
          stat-push-pop-removed:1+!
          2drop >?
      >?
    >?
  >?
  ?r16-af
  r16->opc @301 + gen-c, ;

emiter: pop-r16  ( regidx )  (pop-r16) ;
emiter: pop-hl  reg:hl (pop-r16) ;
emiter: pop-de  reg:de (pop-r16) ;
emiter: pop-bc  reg:bc (pop-r16) ;
emiter: pop-ix  pfx-IX gen-c, @341 gen-c, ;
emiter: pop-iy  pfx-IY gen-c, @341 gen-c, ;


|: (push-r16)  ( regidx )
  ?r16-af
  r16->opc @305 + gen-c, ;

emiter: push-r16  ( regidx )  (push-r16) ;
emiter: push-bc  reg:bc (push-r16) ;
emiter: push-de  reg:de (push-r16) ;
emiter: push-hl  reg:hl (push-r16) ;
emiter: push-ix  pfx-IX gen-c, reg:hl (push-r16) ;
emiter: push-iy  pfx-IY gen-c, reg:hl (push-r16) ;


|: (#->r16)  ( value regidx )
  ?r16-sp
  r16->opc @001 + gen-c,
  lo-word gen-w, ;

emiter: #->r16  ( value regidx )  (#->r16) ;
emiter: #->bc  ( value ) reg:bc (#->r16) ;
emiter: #->de  ( value ) reg:de (#->r16) ;
emiter: #->hl  ( value ) reg:hl (#->r16) ;
emiter: #->ix  ( value ) pfx-IX gen-c, reg:hl (#->r16) ;
emiter: #->iy  ( value ) pfx-IY gen-c, reg:hl (#->r16) ;


|: (c#->r16lh)  ( value regidx high? )
  ?< @006 || @016 >?
  swap ?r16-no-sp-af
  r16->opc + gen-c,
  lo-byte gen-c, ;

emiter: c#->r16l  ( value regidx )  false (c#->r16lh) ;
emiter: c#->r16h  ( value regidx )  true (c#->r16lh) ;
emiter: c#->b  ( value ) reg:bc true (c#->r16lh) ;
emiter: c#->c  ( value ) reg:bc false (c#->r16lh) ;
emiter: c#->d  ( value ) reg:de true (c#->r16lh) ;
emiter: c#->e  ( value ) reg:de false (c#->r16lh) ;
emiter: c#->l  ( value ) reg:hl false (c#->r16lh) ;
emiter: c#->h  ( value ) reg:hl true (c#->r16lh) ;

emiter: c#->a  ( value )
  @076 gen-c,
  lo-byte gen-c, ;

emiter: c#->(hl)  ( value )
  @066 gen-c,
  lo-byte gen-c, ;

|: (c#->(ixy+#))  ( value disp pfx )
  gen-c,
  dup -128 128 within not?error" invalid disp"
  @066 gen-c,
  gen-c,
  lo-byte gen-c, ;

emiter: c#->(ix+#)  ( value disp )  pfx-IX (c#->(ixy+#)) ;
emiter: c#->(iy+#)  ( value disp )  pfx-IY (c#->(ixy+#)) ;


emiter: inc-(ix+#)  ( disp )  pfx-IX gen-c,  @064 gen-c,  gen-c, ;
emiter: dec-(ix+#)  ( disp )  pfx-IX gen-c,  @065 gen-c,  gen-c, ;

emiter: inc-(iy+#)  ( disp )  pfx-IY gen-c,  @064 gen-c,  gen-c, ;
emiter: dec-(iy+#)  ( disp )  pfx-IY gen-c,  @065 gen-c,  gen-c, ;


|: (r16l->(hl))  ( reg-idx )
  ?r16-no-sp-af
  r16*2
  @161 + gen-c, ;

emiter: r16l->(hl)  ( reg-idx )  (r16l->(hl)) ;
emiter: c->(hl)  reg:bc (r16l->(hl)) ;
emiter: e->(hl)  reg:de (r16l->(hl)) ;
emiter: l->(hl)  reg:hl (r16l->(hl)) ;
emiter: c->(ix+#)  ( disp )  pfx-IX gen-c, reg:bc (r16l->(hl)) gen-c, ;
emiter: e->(ix+#)  ( disp )  pfx-IX gen-c, reg:de (r16l->(hl)) gen-c, ;
emiter: l->(ix+#)  ( disp )  pfx-IX gen-c, reg:hl (r16l->(hl)) gen-c, ;
emiter: c->(iy+#)  ( disp )  pfx-IY gen-c, reg:bc (r16l->(hl)) gen-c, ;
emiter: e->(iy+#)  ( disp )  pfx-IY gen-c, reg:de (r16l->(hl)) gen-c, ;
emiter: l->(iy+#)  ( disp )  pfx-IY gen-c, reg:hl (r16l->(hl)) gen-c, ;


|: (r16h->(hl))  ( reg-idx )
  ?r16-no-sp-af
  r16*2
  @160 + gen-c, ;

emiter: r16h->(hl)  ( reg-idx )  (r16h->(hl)) ;
emiter: b->(hl)  reg:bc (r16h->(hl)) ;
emiter: d->(hl)  reg:de (r16h->(hl)) ;
emiter: h->(hl)  reg:hl (r16h->(hl)) ;
emiter: b->(ix+#)  ( disp )  pfx-IX gen-c, reg:bc (r16h->(hl)) gen-c, ;
emiter: d->(ix+#)  ( disp )  pfx-IX gen-c, reg:de (r16h->(hl)) gen-c, ;
emiter: h->(ix+#)  ( disp )  pfx-IX gen-c, reg:hl (r16h->(hl)) gen-c, ;
emiter: b->(iy+#)  ( disp )  pfx-IY gen-c, reg:bc (r16h->(hl)) gen-c, ;
emiter: d->(iy+#)  ( disp )  pfx-IY gen-c, reg:de (r16h->(hl)) gen-c, ;
emiter: h->(iy+#)  ( disp )  pfx-IY gen-c, reg:hl (r16h->(hl)) gen-c, ;

emiter: a->(hl)  @167 gen-c, ;
emiter: (hl)->a  @176 gen-c, ;

|: (aa-iy#)  ( disp pfx opc )
  swap gen-c,
  over -128 128 within not?error" invalid disp"
  gen-c, gen-c, ;

emiter: a->(ix+#)  ( disp )  pfx-IX @167 (aa-iy#) ;
emiter: (ix+#)->a  ( disp )  pfx-IX @176 (aa-iy#) ;
emiter: a->(iy+#)  ( disp )  pfx-IY @167 (aa-iy#) ;
emiter: (iy+#)->a  ( disp )  pfx-IY @176 (aa-iy#) ;


|: ((hl)->r16l)  ( reg-idx )
  ?r16-no-sp-af
  r16->opc
  @116 + gen-c, ;

emiter: (hl)->r16l  ( reg-idx )  ((hl)->r16l) ;
emiter: (hl)->c  reg:bc ((hl)->r16l) ;
emiter: (hl)->e  reg:de ((hl)->r16l) ;
emiter: (hl)->l  reg:hl ((hl)->r16l) ;
emiter: (ix+#)->c  ( disp )  pfx-IX gen-c, reg:bc ((hl)->r16l) gen-c, ;
emiter: (ix+#)->e  ( disp )  pfx-IX gen-c, reg:de ((hl)->r16l) gen-c, ;
emiter: (ix+#)->l  ( disp )  pfx-IX gen-c, reg:hl ((hl)->r16l) gen-c, ;
emiter: (iy+#)->c  ( disp )  pfx-IY gen-c, reg:bc ((hl)->r16l) gen-c, ;
emiter: (iy+#)->e  ( disp )  pfx-IY gen-c, reg:de ((hl)->r16l) gen-c, ;
emiter: (iy+#)->l  ( disp )  pfx-IY gen-c, reg:hl ((hl)->r16l) gen-c, ;


|: ((hl)->r16h)  ( reg-idx )
  ?r16-no-sp-af
  r16->opc
  @106 + gen-c, ;

emiter: (hl)->r16h  ( reg-idx )  ((hl)->r16h) ;
emiter: (hl)->b  ( value ) reg:bc ((hl)->r16h) ;
emiter: (hl)->d  ( value ) reg:de ((hl)->r16h) ;
emiter: (hl)->h  ( value ) reg:hl ((hl)->r16h) ;
emiter: (ix+#)->b  ( disp )  pfx-IX gen-c, reg:bc ((hl)->r16h) gen-c, ;
emiter: (ix+#)->d  ( disp )  pfx-IX gen-c, reg:de ((hl)->r16h) gen-c, ;
emiter: (ix+#)->h  ( disp )  pfx-IX gen-c, reg:hl ((hl)->r16h) gen-c, ;
emiter: (iy+#)->b  ( disp )  pfx-IY gen-c, reg:bc ((hl)->r16h) gen-c, ;
emiter: (iy+#)->d  ( disp )  pfx-IY gen-c, reg:de ((hl)->r16h) gen-c, ;
emiter: (iy+#)->h  ( disp )  pfx-IY gen-c, reg:hl ((hl)->r16h) gen-c, ;


|: (r16l->a)  ( reg-idx )
  ?r16-no-sp-af
  r16*2
  @171 + gen-c, ;

emiter: r16l->a  ( reg-idx )  (r16l->a) ;
emiter: c->a  ( value ) reg:bc (r16l->a) ;
emiter: e->a  ( value ) reg:de (r16l->a) ;
emiter: l->a  ( value ) reg:hl (r16l->a) ;


|: (r16h->a)  ( reg-idx )
  ?r16-no-sp-af
  r16*2
  @170 + gen-c, ;

emiter: r16h->a  ( reg-idx )  (r16h->a) ;
emiter: b->a  ( value ) reg:bc (r16h->a) ;
emiter: d->a  ( value ) reg:de (r16h->a) ;
emiter: h->a  ( value ) reg:hl (r16h->a) ;


|: (a->r16l)  ( reg-idx )
  ?r16-no-sp-af
  r16*2
  8 * @117 + gen-c, ;

emiter: a->r16l  ( reg-idx )  (a->r16l) ;
emiter: a->c  ( value ) reg:bc (a->r16l) ;
emiter: a->e  ( value ) reg:de (a->r16l) ;
emiter: a->l  ( value ) reg:hl (a->r16l) ;


|: (a->r16h)  ( reg-idx )
  ?r16-no-sp-af
  r16*2
  8 * @107 + gen-c, ;

emiter: a->r16h  ( reg-idx )  (a->r16h) ;
emiter: a->b  ( value ) reg:bc (a->r16h) ;
emiter: a->d  ( value ) reg:de (a->r16h) ;
emiter: a->h  ( value ) reg:hl (a->r16h) ;


|: (a->(r16))  ( reg-idx )
  ?r16-mem
  dup reg:HL = ?exit< drop @167 gen-c, >?
  r16*2 8 *
  @002 + gen-c, ;

emiter: a->(r16)  ( reg-idx )  (a->(r16)) ;
emiter: a->(bc)  ( value ) reg:bc (a->(r16)) ;
emiter: a->(de)  ( value ) reg:de (a->(r16)) ;
\ emiter: a->(hl)  ( value ) reg:hl (a->(r16)) ;


|: ((r16)->a)  ( reg-idx )
  ?r16-mem
  dup reg:HL = ?exit< drop @176 gen-c, >?
  r16*2 8 *
  @012 + gen-c, ;

emiter: (r16)->a  ( reg-idx )  ((r16)->a) ;
emiter: (bc)->a  ( value ) reg:bc ((r16)->a) ;
emiter: (de)->a  ( value ) reg:de ((r16)->a) ;
\ emiter: (hl)->a  ( value ) reg:hl ((r16)->a) ;


emiter: a->(nn)  ( addr )
  @062 gen-c, gen-w, ;

emiter: (nn)->a  ( addr )
  @072 gen-c, gen-w, ;


|: alu8-a-r8  ( reg-idx alu-opc )
  swap ?r8 + gen-c, ;

emiter: add-a-r16l  ( reg-idx )  ?r8-no-a @201 + gen-c, ;
emiter: add-a-r16h  ( reg-idx )  ?r8-no-a @200 + gen-c, ;
emiter: add-a-b  reg:b @200 alu8-a-r8 ;
emiter: add-a-c  reg:c @200 alu8-a-r8 ;
emiter: add-a-d  reg:d @200 alu8-a-r8 ;
emiter: add-a-e  reg:e @200 alu8-a-r8 ;
emiter: add-a-h  reg:h @200 alu8-a-r8 ;
emiter: add-a-l  reg:l @200 alu8-a-r8 ;

alias-for add-a-b is add-b
alias-for add-a-c is add-c
alias-for add-a-d is add-d
alias-for add-a-e is add-e
alias-for add-a-h is add-h
alias-for add-a-l is add-l

emiter: adc-a-r16l  ( reg-idx )  ?r8-no-a @211 + gen-c, ;
emiter: adc-a-r16h  ( reg-idx )  ?r8-no-a @210 + gen-c, ;
emiter: adc-a-b  reg:b @210 alu8-a-r8 ;
emiter: adc-a-c  reg:c @210 alu8-a-r8 ;
emiter: adc-a-d  reg:d @210 alu8-a-r8 ;
emiter: adc-a-e  reg:e @210 alu8-a-r8 ;
emiter: adc-a-h  reg:h @210 alu8-a-r8 ;
emiter: adc-a-l  reg:l @210 alu8-a-r8 ;

alias-for adc-a-b is adc-b
alias-for adc-a-c is adc-c
alias-for adc-a-d is adc-d
alias-for adc-a-e is adc-e
alias-for adc-a-h is adc-h
alias-for adc-a-l is adc-l

emiter: sub-a-r16l  ( reg-idx )  ?r8-no-a @221 + gen-c, ;
emiter: sub-a-r16h  ( reg-idx )  ?r8-no-a @220 + gen-c, ;
emiter: sub-a-b  reg:b @220 alu8-a-r8 ;
emiter: sub-a-c  reg:c @220 alu8-a-r8 ;
emiter: sub-a-d  reg:d @220 alu8-a-r8 ;
emiter: sub-a-e  reg:e @220 alu8-a-r8 ;
emiter: sub-a-h  reg:h @220 alu8-a-r8 ;
emiter: sub-a-l  reg:l @220 alu8-a-r8 ;

alias-for sub-a-b is sub-b
alias-for sub-a-c is sub-c
alias-for sub-a-d is sub-d
alias-for sub-a-e is sub-e
alias-for sub-a-h is sub-h
alias-for sub-a-l is sub-l

emiter: sbc-a-r16l  ( reg-idx )  ?r8-no-a @231 + gen-c, ;
emiter: sbc-a-r16h  ( reg-idx )  ?r8-no-a @230 + gen-c, ;
emiter: sbc-a-b  reg:b @230 alu8-a-r8 ;
emiter: sbc-a-c  reg:c @230 alu8-a-r8 ;
emiter: sbc-a-d  reg:d @230 alu8-a-r8 ;
emiter: sbc-a-e  reg:e @230 alu8-a-r8 ;
emiter: sbc-a-h  reg:h @230 alu8-a-r8 ;
emiter: sbc-a-l  reg:l @230 alu8-a-r8 ;

alias-for sbc-a-b is sbc-b
alias-for sbc-a-c is sbc-c
alias-for sbc-a-d is sbc-d
alias-for sbc-a-e is sbc-e
alias-for sbc-a-h is sbc-h
alias-for sbc-a-l is sbc-l

emiter: and-a-r16l  ( reg-idx )  ?r8-no-a @241 + gen-c, ;
emiter: and-a-r16h  ( reg-idx )  ?r8-no-a @240 + gen-c, ;
emiter: and-a-b  reg:b @240 alu8-a-r8 ;
emiter: and-a-c  reg:c @240 alu8-a-r8 ;
emiter: and-a-d  reg:d @240 alu8-a-r8 ;
emiter: and-a-e  reg:e @240 alu8-a-r8 ;
emiter: and-a-h  reg:h @240 alu8-a-r8 ;
emiter: and-a-l  reg:l @240 alu8-a-r8 ;

alias-for and-a-b is and-b
alias-for and-a-c is and-c
alias-for and-a-d is and-d
alias-for and-a-e is and-e
alias-for and-a-h is and-h
alias-for and-a-l is and-l

emiter: xor-a-r16l  ( reg-idx )  ?r8-no-a @251 + gen-c, ;
emiter: xor-a-r16h  ( reg-idx )  ?r8-no-a @250 + gen-c, ;
emiter: xor-a-b  reg:b @250 alu8-a-r8 ;
emiter: xor-a-c  reg:c @250 alu8-a-r8 ;
emiter: xor-a-d  reg:d @250 alu8-a-r8 ;
emiter: xor-a-e  reg:e @250 alu8-a-r8 ;
emiter: xor-a-h  reg:h @250 alu8-a-r8 ;
emiter: xor-a-l  reg:l @250 alu8-a-r8 ;

alias-for xor-a-b is xor-b
alias-for xor-a-c is xor-c
alias-for xor-a-d is xor-d
alias-for xor-a-e is xor-e
alias-for xor-a-h is xor-h
alias-for xor-a-l is xor-l

emiter: or-a-r16l   ( reg-idx )  ?r8-no-a @261 + gen-c, ;
emiter: or-a-r16h   ( reg-idx )  ?r8-no-a @260 + gen-c, ;
emiter: or-a-b  reg:b @260 alu8-a-r8 ;
emiter: or-a-c  reg:c @260 alu8-a-r8 ;
emiter: or-a-d  reg:d @260 alu8-a-r8 ;
emiter: or-a-e  reg:e @260 alu8-a-r8 ;
emiter: or-a-h  reg:h @260 alu8-a-r8 ;
emiter: or-a-l  reg:l @260 alu8-a-r8 ;

alias-for or-a-b is or-b
alias-for or-a-c is or-c
alias-for or-a-d is or-d
alias-for or-a-e is or-e
alias-for or-a-h is or-h
alias-for or-a-l is or-l

emiter: cp-a-r16l   ( reg-idx )  ?r8-no-a @271 + gen-c, ;
emiter: cp-a-r16h   ( reg-idx )  ?r8-no-a @270 + gen-c, ;
emiter: cp-a-b  reg:b @270 alu8-a-r8 ;
emiter: cp-a-c  reg:c @270 alu8-a-r8 ;
emiter: cp-a-d  reg:d @270 alu8-a-r8 ;
emiter: cp-a-e  reg:e @270 alu8-a-r8 ;
emiter: cp-a-h  reg:h @270 alu8-a-r8 ;
emiter: cp-a-l  reg:l @270 alu8-a-r8 ;

alias-for cp-a-b is cp-b
alias-for cp-a-c is cp-c
alias-for cp-a-d is cp-d
alias-for cp-a-e is cp-e
alias-for cp-a-h is cp-h
alias-for cp-a-l is cp-l

emiter: add-a-a  @207 gen-c, ;
emiter: adc-a-a  @217 gen-c, ;
emiter: sub-a-a  @227 gen-c, ;
emiter: sbc-a-a  @237 gen-c, ;
emiter: and-a-a  @247 gen-c, ;
emiter: xor-a-a  @257 gen-c, ;
emiter: or-a-a   @267 gen-c, ;
emiter: cp-a-a   @277 gen-c, ;

alias-for add-a-a is add-a
alias-for adc-a-a is adc-a
alias-for sub-a-a is sub-a
alias-for sbc-a-a is sbc-a
alias-for and-a-a is and-a
alias-for xor-a-a is xor-a
alias-for or-a-a is or-a
alias-for cp-a-a is cp-a

emiter: add-a-c#  ( n )  @306 gen-c, gen-c, ;
emiter: adc-a-c#  ( n )  @316 gen-c, gen-c, ;
emiter: sub-a-c#  ( n )  @326 gen-c, gen-c, ;
emiter: sbc-a-c#  ( n )  @336 gen-c, gen-c, ;
emiter: and-a-c#  ( n )  @346 gen-c, gen-c, ;
emiter: xor-a-c#  ( n )  @356 gen-c, gen-c, ;
emiter: or-a-c#   ( n )  @366 gen-c, gen-c, ;
emiter: cp-a-c#   ( n )  @376 gen-c, gen-c, ;

alias-for add-a-c# is add-c#
alias-for adc-a-c# is adc-c#
alias-for sub-a-c# is sub-c#
alias-for sbc-a-c# is sbc-c#
alias-for and-a-c# is and-c#
alias-for xor-a-c# is xor-c#
alias-for or-a-c# is or-c#
alias-for cp-a-c# is cp-c#

emiter: add-a-(hl)  @206 gen-c, ;
emiter: adc-a-(hl)  @216 gen-c, ;
emiter: sub-a-(hl)  @226 gen-c, ;
emiter: sbc-a-(hl)  @236 gen-c, ;
emiter: and-a-(hl)  @246 gen-c, ;
emiter: xor-a-(hl)  @256 gen-c, ;
emiter: or-a-(hl)   @266 gen-c, ;
emiter: cp-a-(hl)   @276 gen-c, ;

|: (disp,)  ( disp )
  dup -128 128 within not?error" invalid disp"
  gen-c, ;

emiter: add-a-(ix+#)  pfx-IX gen-c, @206 gen-c, (disp,) ;
emiter: adc-a-(ix+#)  pfx-IX gen-c, @216 gen-c, (disp,) ;
emiter: sub-a-(ix+#)  pfx-IX gen-c, @226 gen-c, (disp,) ;
emiter: sbc-a-(ix+#)  pfx-IX gen-c, @236 gen-c, (disp,) ;
emiter: and-a-(ix+#)  pfx-IX gen-c, @246 gen-c, (disp,) ;
emiter: xor-a-(ix+#)  pfx-IX gen-c, @256 gen-c, (disp,) ;
emiter: or-a-(ix+#)   pfx-IX gen-c, @266 gen-c, (disp,) ;
emiter: cp-a-(ix+#)   pfx-IX gen-c, @276 gen-c, (disp,) ;

emiter: add-a-(iy+#)  pfx-IY gen-c, @206 gen-c, (disp,) ;
emiter: adc-a-(iy+#)  pfx-IY gen-c, @216 gen-c, (disp,) ;
emiter: sub-a-(iy+#)  pfx-IY gen-c, @226 gen-c, (disp,) ;
emiter: sbc-a-(iy+#)  pfx-IY gen-c, @236 gen-c, (disp,) ;
emiter: and-a-(iy+#)  pfx-IY gen-c, @246 gen-c, (disp,) ;
emiter: xor-a-(iy+#)  pfx-IY gen-c, @256 gen-c, (disp,) ;
emiter: or-a-(iy+#)   pfx-IY gen-c, @266 gen-c, (disp,) ;
emiter: cp-a-(iy+#)   pfx-IY gen-c, @276 gen-c, (disp,) ;

alias-for add-a-(hl) is add-(hl)
alias-for adc-a-(hl) is adc-(hl)
alias-for sub-a-(hl) is sub-(hl)
alias-for sbc-a-(hl) is sbc-(hl)
alias-for and-a-(hl) is and-(hl)
alias-for xor-a-(hl) is xor-(hl)
alias-for or-a-(hl) is or-(hl)
alias-for cp-a-(hl) is cp-(hl)

\ emiter: add-a-(ix+#)  ( disp )  pfx-IX gen-c, @206 gen-c, gen-c, ;
\ emiter: adc-a-(ix+#)  ( disp )  pfx-IX gen-c, @216 gen-c, gen-c, ;
\ emiter: sub-a-(ix+#)  ( disp )  pfx-IX gen-c, @226 gen-c, gen-c, ;
\ emiter: sbc-a-(ix+#)  ( disp )  pfx-IX gen-c, @236 gen-c, gen-c, ;
\ emiter: and-a-(ix+#)  ( disp )  pfx-IX gen-c, @246 gen-c, gen-c, ;
\ emiter: xor-a-(ix+#)  ( disp )  pfx-IX gen-c, @256 gen-c, gen-c, ;
\ emiter: or-a-(ix+#)   ( disp )  pfx-IX gen-c, @266 gen-c, gen-c, ;
\ emiter: cp-a-(ix+#)   ( disp )  pfx-IX gen-c, @276 gen-c, gen-c, ;

alias-for add-a-(ix+#) is add-(ix+#)
alias-for adc-a-(ix+#) is adc-(ix+#)
alias-for sub-a-(ix+#) is sub-(ix+#)
alias-for sbc-a-(ix+#) is sbc-(ix+#)
alias-for and-a-(ix+#) is and-(ix+#)
alias-for xor-a-(ix+#) is xor-(ix+#)
alias-for or-a-(ix+#) is or-(ix+#)
alias-for cp-a-(ix+#) is cp-(ix+#)

\ emiter: add-a-(iy+#)  ( disp )  pfx-IY gen-c, @206 gen-c, gen-c, ;
\ emiter: adc-a-(iy+#)  ( disp )  pfx-IY gen-c, @216 gen-c, gen-c, ;
\ emiter: sub-a-(iy+#)  ( disp )  pfx-IY gen-c, @226 gen-c, gen-c, ;
\ emiter: sbc-a-(iy+#)  ( disp )  pfx-IY gen-c, @236 gen-c, gen-c, ;
\ emiter: and-a-(iy+#)  ( disp )  pfx-IY gen-c, @246 gen-c, gen-c, ;
\ emiter: xor-a-(iy+#)  ( disp )  pfx-IY gen-c, @256 gen-c, gen-c, ;
\ emiter: or-a-(iy+#)   ( disp )  pfx-IY gen-c, @266 gen-c, gen-c, ;
\ emiter: cp-a-(iy+#)   ( disp )  pfx-IY gen-c, @276 gen-c, gen-c, ;

alias-for add-a-(iy+#) is add-(iy+#)
alias-for adc-a-(iy+#) is adc-(iy+#)
alias-for sub-a-(iy+#) is sub-(iy+#)
alias-for sbc-a-(iy+#) is sbc-(iy+#)
alias-for and-a-(iy+#) is and-(iy+#)
alias-for xor-a-(iy+#) is xor-(iy+#)
alias-for or-a-(iy+#) is or-(iy+#)
alias-for cp-a-(iy+#) is cp-(iy+#)


|: rxx-l/h,  ( reg-idx opc )
  $CB gen-c,
  swap
  ?r8 + gen-c, ;

emiter: rlc-r16l  ( reg-idx ) $CB gen-c, ?r8-no-a @001 + gen-c, ;
emiter: rlc-r16h  ( reg-idx ) $CB gen-c, ?r8-no-a @000 + gen-c, ;
emiter: rlc-b     reg:b    @000 rxx-l/h, ;
emiter: rlc-c     reg:c    @000 rxx-l/h, ;
emiter: rlc-d     reg:d    @000 rxx-l/h, ;
emiter: rlc-e     reg:e    @000 rxx-l/h, ;
emiter: rlc-h     reg:h    @000 rxx-l/h, ;
emiter: rlc-l     reg:l    @000 rxx-l/h, ;
emiter: rlc-(hl)  reg:(hl) @000 rxx-l/h, ;

emiter: rrc-r16l  ( reg-idx )  $CB gen-c, ?r8-no-a @011 + gen-c, ;
emiter: rrc-r16h  ( reg-idx )  $CB gen-c, ?r8-no-a @010 + gen-c, ;
emiter: rrc-b     reg:b    @010 rxx-l/h, ;
emiter: rrc-c     reg:c    @010 rxx-l/h, ;
emiter: rrc-d     reg:d    @010 rxx-l/h, ;
emiter: rrc-e     reg:e    @010 rxx-l/h, ;
emiter: rrc-h     reg:h    @010 rxx-l/h, ;
emiter: rrc-l     reg:l    @010 rxx-l/h, ;
emiter: rrc-(hl)  reg:(hl) @010 rxx-l/h, ;

emiter: rl-r16l   ( reg-idx )  $CB gen-c, ?r8-no-a @021 + gen-c, ;
emiter: rl-r16h   ( reg-idx )  $CB gen-c, ?r8-no-a @020 + gen-c, ;
emiter: rl-b     reg:b    @020 rxx-l/h, ;
emiter: rl-c     reg:c    @020 rxx-l/h, ;
emiter: rl-d     reg:d    @020 rxx-l/h, ;
emiter: rl-e     reg:e    @020 rxx-l/h, ;
emiter: rl-h     reg:h    @020 rxx-l/h, ;
emiter: rl-l     reg:l    @020 rxx-l/h, ;
emiter: rl-(hl)  reg:(hl) @020 rxx-l/h, ;

emiter: rr-r16l   ( reg-idx )  $CB gen-c, ?r8-no-a @031 + gen-c, ;
emiter: rr-r16h   ( reg-idx )  $CB gen-c, ?r8-no-a @030 + gen-c, ;
emiter: rr-b     reg:b    @030 rxx-l/h, ;
emiter: rr-c     reg:c    @030 rxx-l/h, ;
emiter: rr-d     reg:d    @030 rxx-l/h, ;
emiter: rr-e     reg:e    @030 rxx-l/h, ;
emiter: rr-h     reg:h    @030 rxx-l/h, ;
emiter: rr-l     reg:l    @030 rxx-l/h, ;
emiter: rr-(hl)  reg:(hl) @030 rxx-l/h, ;

emiter: sla-r16l  ( reg-idx )  $CB gen-c, ?r8-no-a @041 + gen-c, ;
emiter: sla-r16h  ( reg-idx )  $CB gen-c, ?r8-no-a @040 + gen-c, ;
emiter: sla-b     reg:b    @040 rxx-l/h, ;
emiter: sla-c     reg:c    @040 rxx-l/h, ;
emiter: sla-d     reg:d    @040 rxx-l/h, ;
emiter: sla-e     reg:e    @040 rxx-l/h, ;
emiter: sla-h     reg:h    @040 rxx-l/h, ;
emiter: sla-l     reg:l    @040 rxx-l/h, ;
emiter: sla-(hl)  reg:(hl) @040 rxx-l/h, ;

emiter: sra-r16l  ( reg-idx )  $CB gen-c, ?r8-no-a @051 + gen-c, ;
emiter: sra-r16h  ( reg-idx )  $CB gen-c, ?r8-no-a @050 + gen-c, ;
emiter: sra-b     reg:b    @050 rxx-l/h, ;
emiter: sra-c     reg:c    @050 rxx-l/h, ;
emiter: sra-d     reg:d    @050 rxx-l/h, ;
emiter: sra-e     reg:e    @050 rxx-l/h, ;
emiter: sra-h     reg:h    @050 rxx-l/h, ;
emiter: sra-l     reg:l    @050 rxx-l/h, ;
emiter: sra-(hl)  reg:(hl) @050 rxx-l/h, ;

emiter: sls-r16l  ( reg-idx )  $CB gen-c, ?r8-no-a @061 + gen-c, ;
emiter: sls-r16h  ( reg-idx )  $CB gen-c, ?r8-no-a @060 + gen-c, ;
emiter: sls-b     reg:b    @060 rxx-l/h, ;
emiter: sls-c     reg:c    @060 rxx-l/h, ;
emiter: sls-d     reg:d    @060 rxx-l/h, ;
emiter: sls-e     reg:e    @060 rxx-l/h, ;
emiter: sls-h     reg:h    @060 rxx-l/h, ;
emiter: sls-l     reg:l    @060 rxx-l/h, ;
emiter: sls-(hl)  reg:(hl) @060 rxx-l/h, ;

emiter: srl-r16l  ( reg-idx )  $CB gen-c, ?r8-no-a @071 + gen-c, ;
emiter: srl-r16h  ( reg-idx )  $CB gen-c, ?r8-no-a @070 + gen-c, ;
emiter: srl-b     reg:b    @070 rxx-l/h, ;
emiter: srl-c     reg:c    @070 rxx-l/h, ;
emiter: srl-d     reg:d    @070 rxx-l/h, ;
emiter: srl-e     reg:e    @070 rxx-l/h, ;
emiter: srl-h     reg:h    @070 rxx-l/h, ;
emiter: srl-l     reg:l    @070 rxx-l/h, ;
emiter: srl-(hl)  reg:(hl) @070 rxx-l/h, ;


|: bit-n-l/h,  ( reg-idx bit# opc )
  over 7 u> ?error" invalid bit number"
  $CB gen-c,
  ( prepare bit#) swap 8 * +
  swap
  ?r8-no-a + gen-c, ;

|: bit-n-r8,  ( reg-idx bit# opc )
  over 7 u> ?error" invalid bit number"
  $CB gen-c,
  ( prepare bit#) swap 8 * +
  swap
  ?r8 + gen-c, ;

emiter: bit-r16l-n  ( reg-idx bit# )  @101 bit-n-l/h, ;
emiter: bit-r16h-n  ( reg-idx bit# )  @100 bit-n-l/h, ;
emiter: bit-b-n     ( bit# )  reg:b @100 bit-n-r8, ;
emiter: bit-c-n     ( bit# )  reg:c @100 bit-n-r8, ;
emiter: bit-d-n     ( bit# )  reg:d @100 bit-n-r8, ;
emiter: bit-e-n     ( bit# )  reg:e @100 bit-n-r8, ;
emiter: bit-h-n     ( bit# )  reg:h @100 bit-n-r8, ;
emiter: bit-l-n     ( bit# )  reg:l @100 bit-n-r8, ;
emiter: bit-(hl)-n  ( bit# )  reg:(hl) @100 bit-n-r8, ;
emiter: bit-a-n     ( bit# )  reg:a @100 bit-n-r8, ;

emiter: res-r16l-n  ( reg-idx bit# )  @201 bit-n-l/h, ;
emiter: res-r16h-n  ( reg-idx bit# )  @200 bit-n-l/h, ;
emiter: res-b-n     ( bit# )  reg:b @200 bit-n-r8, ;
emiter: res-c-n     ( bit# )  reg:c @200 bit-n-r8, ;
emiter: res-d-n     ( bit# )  reg:d @200 bit-n-r8, ;
emiter: res-e-n     ( bit# )  reg:e @200 bit-n-r8, ;
emiter: res-h-n     ( bit# )  reg:h @200 bit-n-r8, ;
emiter: res-l-n     ( bit# )  reg:l @200 bit-n-r8, ;
emiter: res-(hl)-n  ( bit# )  reg:(hl) @200 bit-n-r8, ;
emiter: res-a-n     ( bit# )  reg:a @200 bit-n-r8, ;

emiter: set-r16l-n  ( reg-idx bit# )  @301 bit-n-l/h, ;
emiter: set-r16h-n  ( reg-idx bit# )  @300 bit-n-l/h, ;
emiter: set-b-n     ( bit# )  reg:b @300 bit-n-r8, ;
emiter: set-c-n     ( bit# )  reg:c @300 bit-n-r8, ;
emiter: set-d-n     ( bit# )  reg:d @300 bit-n-r8, ;
emiter: set-e-n     ( bit# )  reg:e @300 bit-n-r8, ;
emiter: set-h-n     ( bit# )  reg:h @300 bit-n-r8, ;
emiter: set-l-n     ( bit# )  reg:l @300 bit-n-r8, ;
emiter: set-(hl)-n  ( bit# )  reg:(hl) @300 bit-n-r8, ;
emiter: set-a-n     ( bit# )  reg:a @300 bit-n-r8, ;


|: (r16h->r16l)  ( rsrc rdest )
  ?r16-no-sp-af
  r16->opc @100 +
  swap
  ?r16-no-sp-af
  r16*2 +
  @001 + gen-c, ;

|: (r16l->r16h)  ( rsrc rdest )
  ?r16-no-sp-af
  r16->opc @101 +
  swap
  ?r16-no-sp-af
  r16*2 +
  gen-c, ;

|: (r16l->r16l)  ( rsrc rdest )
  2dup = ?exit< 2drop >?
  ?r16-no-sp-af
  r16->opc @100 +
  swap
  ?r16-no-sp-af
  r16*2 +
  @011 + gen-c, ;

|: (r16h->r16h)  ( rsrc rdest )
  2dup = ?exit< 2drop >?
  r16->opc @100 +
  swap r16*2 +
  gen-c, ;

emiter: r16l->r16l  ( rsrc rdest )  (r16l->r16l) ;
emiter: r16h->r16h  ( rsrc rdest )  (r16h->r16h) ;
emiter: r16h->r16l  ( rsrc rdest )  (r16h->r16l) ;
emiter: r16l->r16h  ( rsrc rdest )  (r16l->r16h) ;

\ emiter: b->b  reg:bc reg:bc (r16h->r16h) ;
emiter: b->d  reg:bc reg:de (r16h->r16h) ;
emiter: b->h  reg:bc reg:hl (r16h->r16h) ;
emiter: b->c  reg:bc reg:bc (r16h->r16l) ;
emiter: b->e  reg:bc reg:de (r16h->r16l) ;
emiter: b->l  reg:bc reg:hl (r16h->r16l) ;

emiter: c->b  reg:bc reg:bc (r16l->r16h) ;
emiter: c->d  reg:bc reg:de (r16l->r16h) ;
emiter: c->h  reg:bc reg:hl (r16l->r16h) ;
\ emiter: c->c  reg:bc reg:bc (r16l->r16l) ;
emiter: c->e  reg:bc reg:de (r16l->r16l) ;
emiter: c->l  reg:bc reg:hl (r16l->r16l) ;

emiter: d->b  reg:de reg:bc (r16h->r16h) ;
\ emiter: d->d  reg:de reg:de (r16h->r16h) ;
emiter: d->h  reg:de reg:hl (r16h->r16h) ;
emiter: d->c  reg:de reg:bc (r16h->r16l) ;
emiter: d->e  reg:de reg:de (r16h->r16l) ;
emiter: d->l  reg:de reg:hl (r16h->r16l) ;

emiter: e->b  reg:de reg:bc (r16l->r16h) ;
emiter: e->d  reg:de reg:de (r16l->r16h) ;
emiter: e->h  reg:de reg:hl (r16l->r16h) ;
emiter: e->c  reg:de reg:bc (r16l->r16l) ;
\ emiter: e->e  reg:de reg:de (r16l->r16l) ;
emiter: e->l  reg:de reg:hl (r16l->r16l) ;

emiter: h->b  reg:hl reg:bc (r16h->r16h) ;
emiter: h->d  reg:hl reg:de (r16h->r16h) ;
\ emiter: h->h  reg:hl reg:hl (r16h->r16h) ;
emiter: h->c  reg:hl reg:bc (r16h->r16l) ;
emiter: h->e  reg:hl reg:de (r16h->r16l) ;
emiter: h->l  reg:hl reg:hl (r16h->r16l) ;

emiter: l->b  reg:hl reg:bc (r16l->r16h) ;
emiter: l->d  reg:hl reg:de (r16l->r16h) ;
emiter: l->h  reg:hl reg:hl (r16l->r16h) ;
emiter: l->c  reg:hl reg:bc (r16l->r16l) ;
emiter: l->e  reg:hl reg:de (r16l->r16l) ;
\ emiter: l->l  reg:hl reg:hl (r16l->r16l) ;


;; note that r16l MUST be loaded last, to not interfere with peephole optimiser.
|: (r16->r16)  ( rsrc rdest )
  ?r16-no-sp-af
  2dup = ?exit< 2drop >?
  2dup (r16h->r16h) (r16l->r16l) ;

emiter: r16->r16  ( rsrc rdest )  (r16->r16) ;

emiter: bc->de  reg:bc reg:de (r16->r16) ;
emiter: bc->hl  reg:bc reg:hl (r16->r16) ;

emiter: de->bc  reg:de reg:bc (r16->r16) ;
emiter: de->hl  reg:de reg:hl (r16->r16) ;

emiter: hl->bc  reg:hl reg:bc (r16->r16) ;
emiter: hl->de  reg:hl reg:de (r16->r16) ;


|: (inc-r16)  ( reg-idx )
  ?r16-sp
  r16->opc @003 + gen-c, ;

emiter: inc-r16  ( reg-idx )  (inc-r16) ;
emiter: inc-bc  reg:bc (inc-r16) ;
emiter: inc-de  reg:de (inc-r16) ;
emiter: inc-hl  reg:hl (inc-r16) ;


|: (dec-r16)  ( reg-idx )
  ?r16-sp
  r16->opc @013 + gen-c, ;

emiter: dec-r16  ( reg-idx )  (dec-r16) ;
emiter: dec-bc  reg:bc (dec-r16) ;
emiter: dec-de  reg:de (dec-r16) ;
emiter: dec-hl  reg:hl (dec-r16) ;


|: (inc-r16l)  ( reg-idx )
  ?r8-no-a 2 u/
  r16->opc @014 + gen-c, ;

emiter: inc-r16l  ( reg-idx )  (inc-r16l) ;
emiter: inc-c  reg:bc (inc-r16l) ;
emiter: inc-e  reg:de (inc-r16l) ;
emiter: inc-l  reg:hl (inc-r16l) ;


|: (dec-r16l)  ( reg-idx )
  ?r8-no-a 2 u/
  r16->opc @015 + gen-c, ;

emiter: dec-r16l  ( reg-idx )  (dec-r16l) ;
emiter: dec-c  reg:bc (dec-r16l) ;
emiter: dec-e  reg:de (dec-r16l) ;
emiter: dec-l  reg:hl (dec-r16l) ;


|: (inc-r16h)  ( reg-idx )
  ?r8-no-a
  r16->opc @004 + gen-c, ;

emiter: inc-r16h  ( reg-idx )  (inc-r16h) ;
emiter: inc-b  reg:bc (inc-r16h) ;
emiter: inc-d  reg:de (inc-r16h) ;
emiter: inc-h  reg:hl (inc-r16h) ;


|: (dec-r16h)  ( reg-idx )
  ?r8-no-a
  r16->opc @005 + gen-c, ;

emiter: dec-r16h  ( reg-idx )  (dec-r16h) ;
emiter: dec-b  reg:bc (dec-r16h) ;
emiter: dec-d  reg:de (dec-r16h) ;
emiter: dec-h  reg:hl (dec-r16h) ;


emiter: inc-ix  pfx-IX gen-c, @043 gen-c, ;
emiter: inc-iy  pfx-IY gen-c, @043 gen-c, ;
emiter: inc-xl  pfx-IX gen-c, @054 gen-c, ;
emiter: inc-yl  pfx-IY gen-c, @054 gen-c, ;
emiter: inc-xh  pfx-IX gen-c, @044 gen-c, ;
emiter: inc-yh  pfx-IY gen-c, @044 gen-c, ;

emiter: dec-ix  pfx-IX gen-c, @053 gen-c, ;
emiter: dec-iy  pfx-IY gen-c, @053 gen-c, ;
emiter: dec-xl  pfx-IX gen-c, @055 gen-c, ;
emiter: dec-yl  pfx-IY gen-c, @055 gen-c, ;
emiter: dec-xh  pfx-IX gen-c, @045 gen-c, ;
emiter: dec-yh  pfx-IY gen-c, @045 gen-c, ;


|: (add-hl-r16)  ( reg-idx )
  ?r16-sp
  r16->opc @011 + gen-c, ;

emiter: add-hl-r16  ( reg-idx )  (add-hl-r16) ;
emiter: add-hl-bc  reg:bc (add-hl-r16) ;
emiter: add-hl-de  reg:de (add-hl-r16) ;
emiter: add-hl-hl  reg:hl (add-hl-r16) ;
emiter: add-hl-sp  reg:sp (add-hl-r16) ;

emiter: add-ix-bc  pfx-IX gen-c, reg:bc (add-hl-r16) ;
emiter: add-ix-de  pfx-IX gen-c, reg:de (add-hl-r16) ;
emiter: add-ix-ix  pfx-IX gen-c, reg:hl (add-hl-r16) ;
emiter: add-ix-sp  pfx-IX gen-c, reg:sp (add-hl-r16) ;

emiter: add-iy-bc  pfx-IY gen-c, reg:bc (add-hl-r16) ;
emiter: add-iy-de  pfx-IY gen-c, reg:de (add-hl-r16) ;
emiter: add-iy-iy  pfx-IY gen-c, reg:hl (add-hl-r16) ;
emiter: add-iy-sp  pfx-IY gen-c, reg:sp (add-hl-r16) ;


|: (adc-hl-r16)  ( reg-idx )
  ?r16-sp
  r16->opc
  $ED gen-c, @112 + gen-c, ;

emiter: adc-hl-r16  ( reg-idx )  (adc-hl-r16) ;
emiter: adc-hl-bc  reg:bc (adc-hl-r16) ;
emiter: adc-hl-de  reg:de (adc-hl-r16) ;
emiter: adc-hl-hl  reg:hl (adc-hl-r16) ;
emiter: adc-hl-sp  reg:sp (adc-hl-r16) ;


|: (sbc-hl-r16)  ( reg-idx )
  ?r16-sp
  r16->opc
  $ED gen-c, @102 + gen-c, ;

emiter: sbc-hl-r16  ( reg-idx )  (sbc-hl-r16) ;
emiter: sbc-hl-bc  reg:bc (sbc-hl-r16) ;
emiter: sbc-hl-de  reg:de (sbc-hl-r16) ;
emiter: sbc-hl-hl  reg:hl (sbc-hl-r16) ;
emiter: sbc-hl-sp  reg:sp (sbc-hl-r16) ;


|: ((nn)->r16)  ( addr reg-idx )
  ?r16-sp
  dup reg:HL = ?exit< drop @052 gen-c, lo-word gen-w, >?
  r16->opc
  $ED gen-c, @113 + gen-c, lo-word gen-w, ;

emiter: (nn)->r16  ( addr reg-idx )  ((nn)->r16) ;
emiter: (nn)->bc  ( addr )  reg:bc ((nn)->r16) ;
emiter: (nn)->de  ( addr )  reg:de ((nn)->r16) ;
emiter: (nn)->hl  ( addr )  reg:hl ((nn)->r16) ;


|: (r16->(nn))  ( addr reg-idx )
  ?r16-sp
  dup reg:HL = ?exit< drop @042 gen-c, lo-word gen-w, >?
  r16->opc
  $ED gen-c, @103 + gen-c, lo-word gen-w, ;

emiter: r16->(nn)  ( addr reg-idx )  (r16->(nn)) ;
emiter: bc->(nn)  ( addr )  reg:bc (r16->(nn)) ;
emiter: de->(nn)  ( addr )  reg:de (r16->(nn)) ;
emiter: hl->(nn)  ( addr )  reg:hl (r16->(nn)) ;


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; ZXEmuT macros

emiter: zxemut-bp
  $ED gen-c, $FE gen-c, $18 gen-c,
  1 gen-c, 2 gen-c, ;

emiter: zxemut-pause
  $ED gen-c, $FE gen-c, $18 gen-c,
  2 gen-c, $10 gen-c, 0 gen-c, ;

emiter: zxemut-max-speed
  $ED gen-c, $FE gen-c, $18 gen-c,
  2 gen-c, $10 gen-c, 1 gen-c, ;

emiter: zxemut-normal-speed
  $ED gen-c, $FE gen-c, $18 gen-c,
  2 gen-c, $10 gen-c, 2 gen-c, ;

emiter: zxemut-reset-ts-counter
  $ED gen-c, $FE gen-c, $18 gen-c,
  1 gen-c, $00 gen-c, ;

emiter: zxemut-pause-ts-counter
  $ED gen-c, $FE gen-c, $18 gen-c,
  2 gen-c, $00 gen-c, 1 gen-c, ;

emiter: zxemut-resume-ts-counter
  $ED gen-c, $FE gen-c, $18 gen-c,
  2 gen-c, $00 gen-c, 2 gen-c, ;

emiter: zxemut-print-ts-counter
  $ED gen-c, $FE gen-c, $18 gen-c,
  1 gen-c, $01 gen-c, ;


;; ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; higher-level code support

false quan (TOS-in-DE?) (private)

@: TOS-in-HL!  (TOS-in-DE?):!f ;
@: TOS-in-DE!  (TOS-in-DE?):!t ;

@: TOS-in-DE?  (TOS-in-DE?) ;
@: TOS-in-HL?  (TOS-in-DE?) 0= ;

@: TOS-invert! (TOS-in-DE?) 0= (TOS-in-DE?):! ;


@: ex-tos-to-de
  (TOS-in-DE?) ?exit
  ex-de-hl
  (TOS-in-DE?):!t ;

@: restore-tos
  (TOS-in-DE?) not?exit
  ex-de-hl
  (TOS-in-DE?):!f ;

@: tos-r16
  (TOS-in-DE?) ?< reg:de || reg:hl >? ;

@: non-tos-r16
  (TOS-in-DE?) ?< reg:hl || reg:de >? ;

@: push-tos
  tos-r16 push-r16 ;

@: pop-tos
  tos-r16 pop-r16 ;

@: push-non-tos
  non-tos-r16 push-r16 ;

@: pop-non-tos
  non-tos-r16 pop-r16 ;

@: pop-tos-hl
  (TOS-in-DE?):!f
  pop-hl ;

@: pop-tos-de
  (TOS-in-DE?):!t
  pop-de ;

@: #->tos  ( value )  tos-r16 #->r16 ;
@: c#->tosl  ( value )  tos-r16 c#->r16l ;
@: c#->tosh  ( value )  tos-r16 c#->r16h ;
@: (nn)->tos  ( addr )  tos-r16 (nn)->r16 ;
@: tos->(nn)  ( addr )  tos-r16 r16->(nn) ;
@: a->(tos)  tos-r16 a->(r16) ;
@: (tos)->a  tos-r16 (r16)->a ;
@: inc-tos  tos-r16 inc-r16 ;
@: dec-tos  tos-r16 dec-r16 ;
@: a->tos  tos-r16 a->r16l  0 tos-r16 c#->r16h ;

@: restore-iy  $5C3A #->iy ;


;; we need to have current TOS in DE, and next value in HL; TOS should be HL.
;; do pop first for easier peephole optimising.
@: nd-branch-pop
  TOS-in-HL? ?<
    pop-de
    ex-de-hl
  ||
    pop-hl
    TOS-in-HL!
  >? ;

;; move TOS to HL, then pop DE.
;; the instruction order is suitable for peephole optimising.
@: restore-tos-pop-de
  TOS-in-HL? ?<
    pop-de
  ||
    pop-hl
    ex-de-hl
    TOS-in-HL!
  >? ;


;; move TOS to DE, then pop HL.
;; the instruction order is suitable for peephole optimising.
@: ex-tos-to-de-pop-hl
  TOS-in-HL? ?<
    pop-de
    ex-de-hl
    TOS-in-DE!
  ||
    pop-hl
  >? ;


@: reset-ilist
  ilist-free-idx:!0 ;


@: reset
  TOS-in-HL! reset-ilist ;

seal-module
end-module XASM  (published)
end-module TCOM
